
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e90  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a8  080060a8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080060bc  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  0800615c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000076c  2000014c  080061fc  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008b8  080061fc  000208b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017ef8  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002936  00000000  00000000  00038072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c8  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011d0  00000000  00000000  0003bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029545  00000000  00000000  0003ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015696  00000000  00000000  00066385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103799  00000000  00000000  0007ba1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017f1b4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050ac  00000000  00000000  0017f204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006070 	.word	0x08006070

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08006070 	.word	0x08006070

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	0000      	movs	r0, r0
	...

08000540 <HAL_TIM_IC_CaptureCallback>:
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
}

// CALLBACK FUNCTION
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7f1b      	ldrb	r3, [r3, #28]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d179      	bne.n	8000644 <HAL_TIM_IC_CaptureCallback+0x104>
	{
		if (Is_First_Captured[0]==0) // if the first value is not captured
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d11a      	bne.n	800058e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000558:	2100      	movs	r1, #0
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f004 f800 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 8000560:	4603      	mov	r3, r0
 8000562:	4a8c      	ldr	r2, [pc, #560]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000564:	6013      	str	r3, [r2, #0]
			Is_First_Captured[0] = 1;  // set the first captured as true
 8000566:	4b8a      	ldr	r3, [pc, #552]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6a1a      	ldr	r2, [r3, #32]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f022 020a 	bic.w	r2, r2, #10
 800057a:	621a      	str	r2, [r3, #32]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f042 0202 	orr.w	r2, r2, #2
 800058a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);

		}
	}
}
 800058c:	e165      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
		else if (Is_First_Captured[0]==1)   // if the first is already captured
 800058e:	4b80      	ldr	r3, [pc, #512]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	f040 8161 	bne.w	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
			IC_Val2[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000598:	2100      	movs	r1, #0
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f003 ffe0 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a7d      	ldr	r2, [pc, #500]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80005a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2[0] > IC_Val1[0])
 80005ae:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b78      	ldr	r3, [pc, #480]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d907      	bls.n	80005ca <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference[0] = IC_Val2[0]-IC_Val1[0];
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b75      	ldr	r3, [pc, #468]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a75      	ldr	r2, [pc, #468]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e00f      	b.n	80005ea <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1[0] > IC_Val2[0])
 80005ca:	4b72      	ldr	r3, [pc, #456]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b72      	ldr	r3, [pc, #456]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d909      	bls.n	80005ea <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference[0] = (0xffff - IC_Val1[0]) + IC_Val2[0];
 80005d6:	4b70      	ldr	r3, [pc, #448]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b6e      	ldr	r3, [pc, #440]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad2      	subs	r2, r2, r3
 80005e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e4:	4413      	add	r3, r2
 80005e6:	4a6d      	ldr	r2, [pc, #436]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80005e8:	6013      	str	r3, [r2, #0]
			Distance[0] = Difference[0] * .0344/2;
 80005ea:	4b6c      	ldr	r3, [pc, #432]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80005f6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000788 <HAL_TIM_IC_CaptureCallback+0x248>
 80005fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000606:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800060a:	4b65      	ldr	r3, [pc, #404]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
			Is_First_Captured[0] = 0; // set it back to false
 8000610:	4b5f      	ldr	r3, [pc, #380]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6a1a      	ldr	r2, [r3, #32]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f022 020a 	bic.w	r2, r2, #10
 8000624:	621a      	str	r2, [r3, #32]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a12      	ldr	r2, [r2, #32]
 8000630:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000632:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f022 0202 	bic.w	r2, r2, #2
 8000640:	60da      	str	r2, [r3, #12]
}
 8000642:	e10a      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7f1b      	ldrb	r3, [r3, #28]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d179      	bne.n	8000740 <HAL_TIM_IC_CaptureCallback+0x200>
		if (Is_First_Captured[1]==0) // if the first value is not captured
 800064c:	4b50      	ldr	r3, [pc, #320]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d11a      	bne.n	800068a <HAL_TIM_IC_CaptureCallback+0x14a>
				IC_Val1[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000654:	2104      	movs	r1, #4
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f003 ff82 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 800065c:	4603      	mov	r3, r0
 800065e:	4a4d      	ldr	r2, [pc, #308]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000660:	6053      	str	r3, [r2, #4]
				Is_First_Captured[1] = 1;  // set the first captured as true
 8000662:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000664:	2201      	movs	r2, #1
 8000666:	705a      	strb	r2, [r3, #1]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a1a      	ldr	r2, [r3, #32]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000676:	621a      	str	r2, [r3, #32]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f042 0220 	orr.w	r2, r2, #32
 8000686:	621a      	str	r2, [r3, #32]
}
 8000688:	e0e7      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
		else if (Is_First_Captured[1]==1)   // if the first is already captured
 800068a:	4b41      	ldr	r3, [pc, #260]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	2b01      	cmp	r3, #1
 8000690:	f040 80e3 	bne.w	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
			IC_Val2[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000694:	2104      	movs	r1, #4
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f003 ff62 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 800069c:	4603      	mov	r3, r0
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80006a0:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2[1] > IC_Val1[1])
 80006aa:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d907      	bls.n	80006c6 <HAL_TIM_IC_CaptureCallback+0x186>
				Difference[1] = IC_Val2[1]-IC_Val1[1];
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4a36      	ldr	r2, [pc, #216]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006c2:	6053      	str	r3, [r2, #4]
 80006c4:	e00f      	b.n	80006e6 <HAL_TIM_IC_CaptureCallback+0x1a6>
			else if (IC_Val1[1] > IC_Val2[1])
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d909      	bls.n	80006e6 <HAL_TIM_IC_CaptureCallback+0x1a6>
				Difference[1] = (0xffff - IC_Val1[1]) + IC_Val2[1];
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x258>)
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e0:	4413      	add	r3, r2
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006e4:	6053      	str	r3, [r2, #4]
			Distance[1] = Difference[1] * .0344/2;
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006f2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000788 <HAL_TIM_IC_CaptureCallback+0x248>
 80006f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80006fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000708:	edc3 7a01 	vstr	s15, [r3, #4]
			Is_First_Captured[1] = 0; // set it back to false
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 800070e:	2200      	movs	r2, #0
 8000710:	705a      	strb	r2, [r3, #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a1a      	ldr	r2, [r3, #32]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000720:	621a      	str	r2, [r3, #32]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a12      	ldr	r2, [r2, #32]
 800072c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0204 	bic.w	r2, r2, #4
 800073c:	60da      	str	r2, [r3, #12]
}
 800073e:	e08c      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7f1b      	ldrb	r3, [r3, #28]
 8000744:	2b04      	cmp	r3, #4
 8000746:	f040 8088 	bne.w	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
		if (Is_First_Captured[2]==0) // if the first value is not captured
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d12a      	bne.n	80007a8 <HAL_TIM_IC_CaptureCallback+0x268>
			IC_Val1[2] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000752:	2108      	movs	r1, #8
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f003 ff03 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 800075a:	4603      	mov	r3, r0
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x254>)
 800075e:	6093      	str	r3, [r2, #8]
			Is_First_Captured[2] = 1;  // set the first captured as true
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000762:	2201      	movs	r2, #1
 8000764:	709a      	strb	r2, [r3, #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a1a      	ldr	r2, [r3, #32]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000774:	621a      	str	r2, [r3, #32]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6a1a      	ldr	r2, [r3, #32]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000784:	621a      	str	r2, [r3, #32]
}
 8000786:	e068      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
 8000788:	75f6fd22 	.word	0x75f6fd22
 800078c:	3fa19ce0 	.word	0x3fa19ce0
 8000790:	2000089c 	.word	0x2000089c
 8000794:	20000878 	.word	0x20000878
 8000798:	20000884 	.word	0x20000884
 800079c:	20000890 	.word	0x20000890
 80007a0:	200008a0 	.word	0x200008a0
 80007a4:	20000250 	.word	0x20000250
		else if (Is_First_Captured[2]==1)   // if the first is already captured
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x330>)
 80007aa:	789b      	ldrb	r3, [r3, #2]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d154      	bne.n	800085a <HAL_TIM_IC_CaptureCallback+0x31a>
			IC_Val2[2] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80007b0:	2108      	movs	r1, #8
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f003 fed4 	bl	8004560 <HAL_TIM_ReadCapturedValue>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x334>)
 80007bc:	6093      	str	r3, [r2, #8]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2[2] > IC_Val1[2])
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x334>)
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_TIM_IC_CaptureCallback+0x338>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d907      	bls.n	80007e2 <HAL_TIM_IC_CaptureCallback+0x2a2>
				Difference[2] = IC_Val2[2]-IC_Val1[2];
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x334>)
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <HAL_TIM_IC_CaptureCallback+0x338>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <HAL_TIM_IC_CaptureCallback+0x33c>)
 80007de:	6093      	str	r3, [r2, #8]
 80007e0:	e00f      	b.n	8000802 <HAL_TIM_IC_CaptureCallback+0x2c2>
			else if (IC_Val1[2] > IC_Val2[2])
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_TIM_IC_CaptureCallback+0x338>)
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x334>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d909      	bls.n	8000802 <HAL_TIM_IC_CaptureCallback+0x2c2>
				Difference[2] = (0xffff - IC_Val1[2]) + IC_Val2[2];
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x334>)
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_TIM_IC_CaptureCallback+0x338>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	1ad2      	subs	r2, r2, r3
 80007f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fc:	4413      	add	r3, r2
 80007fe:	4a1f      	ldr	r2, [pc, #124]	; (800087c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000800:	6093      	str	r3, [r2, #8]
			Distance[2] = Difference[2] * .0344/2;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	ee07 3a90 	vmov	s15, r3
 800080a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800080e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000868 <HAL_TIM_IC_CaptureCallback+0x328>
 8000812:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000816:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800081a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800081e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000824:	edc3 7a02 	vstr	s15, [r3, #8]
			Is_First_Captured[2] = 0; // set it back to false
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x330>)
 800082a:	2200      	movs	r2, #0
 800082c:	709a      	strb	r2, [r3, #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a1a      	ldr	r2, [r3, #32]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800083c:	621a      	str	r2, [r3, #32]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a12      	ldr	r2, [r2, #32]
 8000848:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_TIM_IC_CaptureCallback+0x344>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f022 0208 	bic.w	r2, r2, #8
 8000858:	60da      	str	r2, [r3, #12]
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	f3af 8000 	nop.w
 8000868:	75f6fd22 	.word	0x75f6fd22
 800086c:	3fa19ce0 	.word	0x3fa19ce0
 8000870:	2000089c 	.word	0x2000089c
 8000874:	20000884 	.word	0x20000884
 8000878:	20000878 	.word	0x20000878
 800087c:	20000890 	.word	0x20000890
 8000880:	200008a0 	.word	0x200008a0
 8000884:	20000250 	.word	0x20000250

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f000 fe50 	bl	8001532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f869 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 fa77 	bl	8000d88 <MX_GPIO_Init>
  MX_ETH_Init();
 800089a:	f000 f8d7 	bl	8000a4c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800089e:	f000 fa15 	bl	8000ccc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008a2:	f000 fa43 	bl	8000d2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80008a6:	f000 f91f 	bl	8000ae8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008aa:	f000 f98d 	bl	8000bc8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // start TIM1 Channel 1 in Input capture mode.
 80008ae:	2100      	movs	r1, #0
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <main+0xd4>)
 80008b2:	f003 f96b 	bl	8003b8c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);  // start TIM1 Channel 2 in Input capture mode.
 80008b6:	2104      	movs	r1, #4
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <main+0xd4>)
 80008ba:	f003 f967 	bl	8003b8c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);  // start TIM1 Channel 3 in Input capture mode.
 80008be:	2108      	movs	r1, #8
 80008c0:	4826      	ldr	r0, [pc, #152]	; (800095c <main+0xd4>)
 80008c2:	f003 f963 	bl	8003b8c <HAL_TIM_IC_Start_IT>

  // ESC Control
  TIM3->CCR1 = 990;
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <main+0xd8>)
 80008c8:	f240 32de 	movw	r2, #990	; 0x3de
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 990;
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <main+0xd8>)
 80008d0:	f240 32de 	movw	r2, #990	; 0x3de
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008d6:	2100      	movs	r1, #0
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <main+0xdc>)
 80008da:	f003 f805 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008de:	2104      	movs	r1, #4
 80008e0:	4820      	ldr	r0, [pc, #128]	; (8000964 <main+0xdc>)
 80008e2:	f003 f801 	bl	80038e8 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fe7f 	bl	80015ec <HAL_Delay>

  TIM3->CCR1 = 500;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <main+0xd8>)
 80008f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 500;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <main+0xd8>)
 80008f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_Delay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f000 fe73 	bl	80015ec <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  //TIM3->CCR1 = 600;

	   for (int i=500; i < 990; i++) {
 8000906:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	e00b      	b.n	8000926 <main+0x9e>
		   TIM3->CCR1 = i;
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <main+0xd8>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6353      	str	r3, [r2, #52]	; 0x34
		   TIM3->CCR2 = i;
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <main+0xd8>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6393      	str	r3, [r2, #56]	; 0x38
		   HAL_Delay(5);
 800091a:	2005      	movs	r0, #5
 800091c:	f000 fe66 	bl	80015ec <HAL_Delay>
	   for (int i=500; i < 990; i++) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f240 32dd 	movw	r2, #989	; 0x3dd
 800092c:	4293      	cmp	r3, r2
 800092e:	ddee      	ble.n	800090e <main+0x86>
	   }

	   for (int i=990; i > 500; i--) {
 8000930:	f240 33de 	movw	r3, #990	; 0x3de
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	e00b      	b.n	8000950 <main+0xc8>
	   		   TIM3->CCR1 = i;
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <main+0xd8>)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	6353      	str	r3, [r2, #52]	; 0x34
	   		   TIM3->CCR2 = i;
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <main+0xd8>)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	6393      	str	r3, [r2, #56]	; 0x38
	   		   HAL_Delay(5);
 8000944:	2005      	movs	r0, #5
 8000946:	f000 fe51 	bl	80015ec <HAL_Delay>
	   for (int i=990; i > 500; i--) {
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000956:	dcef      	bgt.n	8000938 <main+0xb0>
	   for (int i=500; i < 990; i++) {
 8000958:	e7d5      	b.n	8000906 <main+0x7e>
 800095a:	bf00      	nop
 800095c:	20000250 	.word	0x20000250
 8000960:	40000400 	.word	0x40000400
 8000964:	2000029c 	.word	0x2000029c

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2234      	movs	r2, #52	; 0x34
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fb72 	bl	8006060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800098c:	f001 fd98 	bl	80024c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <SystemClock_Config+0xdc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <SystemClock_Config+0xdc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <SystemClock_Config+0xdc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <SystemClock_Config+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <SystemClock_Config+0xe0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <SystemClock_Config+0xe0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fdc5 	bl	8002580 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009fc:	f000 faac 	bl	8000f58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a00:	f001 fd6e 	bl	80024e0 <HAL_PWREx_EnableOverDrive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a0a:	f000 faa5 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000a1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2103      	movs	r1, #3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 f856 	bl	8002adc <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a36:	f000 fa8f 	bl	8000f58 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a52:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <MX_ETH_Init+0x88>)
 8000a54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a64:	22e1      	movs	r2, #225	; 0xe1
 8000a66:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_ETH_Init+0x8c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a86:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <MX_ETH_Init+0x90>)
 8000a8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_ETH_Init+0x94>)
 8000a92:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a9a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_ETH_Init+0x84>)
 8000a9e:	f000 fedb 	bl	8001858 <HAL_ETH_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 fa56 	bl	8000f58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aac:	2238      	movs	r2, #56	; 0x38
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_ETH_Init+0x98>)
 8000ab2:	f005 fad5 	bl	8006060 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_ETH_Init+0x98>)
 8000ab8:	2221      	movs	r2, #33	; 0x21
 8000aba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_ETH_Init+0x98>)
 8000abe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ac2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_ETH_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001a0 	.word	0x200001a0
 8000ad4:	40028000 	.word	0x40028000
 8000ad8:	200008ac 	.word	0x200008ac
 8000adc:	200000ac 	.word	0x200000ac
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	20000168 	.word	0x20000168

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b08:	4a2e      	ldr	r2, [pc, #184]	; (8000bc4 <MX_TIM1_Init+0xdc>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b0e:	225f      	movs	r2, #95	; 0x5f
 8000b10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b34:	f002 ffd2 	bl	8003adc <HAL_TIM_IC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b3e:	f000 fa0b 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b56:	f004 fa57 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f9fa 	bl	8000f58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b7c:	f003 fa75 	bl	800406a <HAL_TIM_IC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000b86:	f000 f9e7 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000b92:	f003 fa6a 	bl	800406a <HAL_TIM_IC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b9c:	f000 f9dc 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_TIM1_Init+0xd8>)
 8000ba8:	f003 fa5f 	bl	800406a <HAL_TIM_IC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000bb2:	f000 f9d1 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000250 	.word	0x20000250
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000bfc:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <MX_TIM3_Init+0x100>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25-1;
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c02:	2218      	movs	r2, #24
 8000c04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c20:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c22:	f002 fda9 	bl	8003778 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c2c:	f000 f994 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4821      	ldr	r0, [pc, #132]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c3e:	f003 fbc5 	bl	80043cc <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c48:	f000 f986 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c4e:	f002 fdea 	bl	8003826 <HAL_TIM_PWM_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c58:	f000 f97e 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c6c:	f004 f9cc 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c76:	f000 f96f 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	2360      	movs	r3, #96	; 0x60
 8000c7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c92:	f003 fa87 	bl	80041a4 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c9c:	f000 f95c 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000ca8:	f003 fa7c 	bl	80041a4 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000cb2:	f000 f951 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000cb8:	f000 fa9c 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000029c 	.word	0x2000029c
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <MX_USART3_UART_Init+0x5c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART3_UART_Init+0x58>)
 8000d10:	f004 fa26 	bl	8005160 <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 f91d 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200002e8 	.word	0x200002e8
 8000d28:	40004800 	.word	0x40004800

08000d2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2206      	movs	r2, #6
 8000d3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	f001 fa5d 	bl	800222e <HAL_PCD_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f000 f8ed 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000370 	.word	0x20000370

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	623b      	str	r3, [r7, #32]
 8000db4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a55      	ldr	r2, [pc, #340]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e04:	f043 0320 	orr.w	r3, r3, #32
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0320 	and.w	r3, r3, #32
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a43      	ldr	r2, [pc, #268]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_GPIO_Init+0x1b8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e64:	4837      	ldr	r0, [pc, #220]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e66:	f001 f9c9 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e70:	4835      	ldr	r0, [pc, #212]	; (8000f48 <MX_GPIO_Init+0x1c0>)
 8000e72:	f001 f9c3 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e7c:	4833      	ldr	r0, [pc, #204]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000e7e:	f001 f9bd 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	4832      	ldr	r0, [pc, #200]	; (8000f50 <MX_GPIO_Init+0x1c8>)
 8000e88:	f001 f9b8 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482c      	ldr	r0, [pc, #176]	; (8000f54 <MX_GPIO_Init+0x1cc>)
 8000ea4:	f000 fffe 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ea8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4820      	ldr	r0, [pc, #128]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000ec2:	f000 ffef 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_GPIO_Init+0x1c0>)
 8000ee0:	f000 ffe0 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ee4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000efe:	f000 ffd1 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f02:	2340      	movs	r3, #64	; 0x40
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_GPIO_Init+0x1c8>)
 8000f1a:	f000 ffc3 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_GPIO_Init+0x1c8>)
 8000f32:	f000 ffb7 	bl	8001ea4 <HAL_GPIO_Init>

}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	; 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40021400 	.word	0x40021400
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40021800 	.word	0x40021800
 8000f54:	40020800 	.word	0x40020800

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_ETH_MspInit+0x158>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	f040 8096 	bne.w	80010fc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	623b      	str	r3, [r7, #32]
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a46      	ldr	r2, [pc, #280]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a40      	ldr	r2, [pc, #256]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a34      	ldr	r2, [pc, #208]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a28      	ldr	r2, [pc, #160]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 8001066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_ETH_MspInit+0x15c>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001078:	2332      	movs	r3, #50	; 0x32
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	481e      	ldr	r0, [pc, #120]	; (800110c <HAL_ETH_MspInit+0x160>)
 8001094:	f000 ff06 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001098:	2386      	movs	r3, #134	; 0x86
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a8:	230b      	movs	r3, #11
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <HAL_ETH_MspInit+0x164>)
 80010b4:	f000 fef6 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ca:	230b      	movs	r3, #11
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <HAL_ETH_MspInit+0x168>)
 80010d6:	f000 fee5 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ec:	230b      	movs	r3, #11
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4808      	ldr	r0, [pc, #32]	; (8001118 <HAL_ETH_MspInit+0x16c>)
 80010f8:	f000 fed4 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40028000 	.word	0x40028000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40021800 	.word	0x40021800

0800111c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_TIM_IC_MspInit+0x8c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d130      	bne.n	80011a0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_TIM_IC_MspInit+0x90>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800116e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001180:	2301      	movs	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_TIM_IC_MspInit+0x94>)
 800118c:	f000 fe8a 	bl	8001ea4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	201b      	movs	r0, #27
 8001196:	f000 fb28 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800119a:	201b      	movs	r0, #27
 800119c:	f000 fb41 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x38>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10b      	bne.n	80011de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40000400 	.word	0x40000400
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_TIM_MspPostInit+0x9c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d137      	bne.n	8001286 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_TIM_MspPostInit+0xa0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001256:	2302      	movs	r3, #2
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <HAL_TIM_MspPostInit+0xa4>)
 8001262:	f000 fe1f 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001276:	2302      	movs	r3, #2
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_TIM_MspPostInit+0xa8>)
 8001282:	f000 fe0f 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40000400 	.word	0x40000400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020800 	.word	0x40020800

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0ae      	sub	sp, #184	; 0xb8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2290      	movs	r2, #144	; 0x90
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fecd 	bl	8006060 <memset>
  if(huart->Instance==USART3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <HAL_UART_MspInit+0xb4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d13c      	bne.n	800134a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fe22 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012ea:	f7ff fe35 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_UART_MspInit+0xb8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_UART_MspInit+0xb8>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_MspInit+0xb8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_UART_MspInit+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a13      	ldr	r2, [pc, #76]	; (8001358 <HAL_UART_MspInit+0xb8>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_UART_MspInit+0xb8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800131e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001338:	2307      	movs	r3, #7
 800133a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_UART_MspInit+0xbc>)
 8001346:	f000 fdad 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	37b8      	adds	r7, #184	; 0xb8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004800 	.word	0x40004800
 8001358:	40023800 	.word	0x40023800
 800135c:	40020c00 	.word	0x40020c00

08001360 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ae      	sub	sp, #184	; 0xb8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2290      	movs	r2, #144	; 0x90
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fe6d 	bl	8006060 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138e:	d159      	bne.n	8001444 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001394:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fdc1 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013ac:	f7ff fdd4 	bl	8000f58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_PCD_MspInit+0xec>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_PCD_MspInit+0xec>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_PCD_MspInit+0xec>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e2:	230a      	movs	r3, #10
 80013e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <HAL_PCD_MspInit+0xf0>)
 80013f0:	f000 fd58 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800140c:	4619      	mov	r1, r3
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <HAL_PCD_MspInit+0xf0>)
 8001410:	f000 fd48 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_PCD_MspInit+0xec>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_PCD_MspInit+0xec>)
 800141a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141e:	6353      	str	r3, [r2, #52]	; 0x34
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_PCD_MspInit+0xec>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_PCD_MspInit+0xec>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_PCD_MspInit+0xec>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6453      	str	r3, [r2, #68]	; 0x44
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_PCD_MspInit+0xec>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37b8      	adds	r7, #184	; 0xb8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f884 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM1_CC_IRQHandler+0x10>)
 80014ae:	f002 fcbd 	bl	8003e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000250 	.word	0x20000250

080014bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <SystemInit+0x20>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <SystemInit+0x20>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014fc:	4c0b      	ldr	r4, [pc, #44]	; (800152c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150a:	f7ff ffd7 	bl	80014bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150e:	f004 fd83 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f9b9 	bl	8000888 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001524:	080060b0 	.word	0x080060b0
  ldr r2, =_sbss
 8001528:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800152c:	200008b8 	.word	0x200008b8

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>

08001532 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001536:	2003      	movs	r0, #3
 8001538:	f000 f94c 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153c:	2000      	movs	r0, #0
 800153e:	f000 f805 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001542:	f7ff fd0f 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f967 	bl	800183e <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f92f 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200008b4 	.word	0x200008b4

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200008b4 	.word	0x200008b4

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <__NVIC_SetPriorityGrouping+0x40>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	4313      	orrs	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x40>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00
 8001678:	05fa0000 	.word	0x05fa0000

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06a      	b.n	8001940 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	2b00      	cmp	r3, #0
 8001872:	d106      	bne.n	8001882 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2223      	movs	r2, #35	; 0x23
 8001878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fb95 	bl	8000fac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a30      	ldr	r2, [pc, #192]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_ETH_Init+0xf4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a2b      	ldr	r2, [pc, #172]	; (800194c <HAL_ETH_Init+0xf4>)
 80018a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_ETH_Init+0xf4>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4927      	ldr	r1, [pc, #156]	; (800194c <HAL_ETH_Init+0xf4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_ETH_Init+0xf4>)
 80018b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d0:	f7ff fe80 	bl	80015d4 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d6:	e011      	b.n	80018fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018d8:	f7ff fe7c 	bl	80015d4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018e6:	d909      	bls.n	80018fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	22e0      	movs	r2, #224	; 0xe0
 80018f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e021      	b.n	8001940 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f958 	bl	8001bc4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9ff 	bl	8001d18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa55 	bl	8001dca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	461a      	mov	r2, r3
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f9bd 	bl	8001ca8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2210      	movs	r2, #16
 800193a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800

08001950 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <ETH_SetMACConfig+0x15c>)
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7c1b      	ldrb	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <ETH_SetMACConfig+0x28>
 8001972:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001976:	e000      	b.n	800197a <ETH_SetMACConfig+0x2a>
 8001978:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	7c5b      	ldrb	r3, [r3, #17]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <ETH_SetMACConfig+0x38>
 8001982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001986:	e000      	b.n	800198a <ETH_SetMACConfig+0x3a>
 8001988:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800198a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7fdb      	ldrb	r3, [r3, #31]
 8001996:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001998:	431a      	orrs	r2, r3
                        macconf->Speed |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800199e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	7f92      	ldrb	r2, [r2, #30]
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d102      	bne.n	80019ae <ETH_SetMACConfig+0x5e>
 80019a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ac:	e000      	b.n	80019b0 <ETH_SetMACConfig+0x60>
 80019ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80019b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	7f1b      	ldrb	r3, [r3, #28]
 80019b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d102      	bne.n	80019d8 <ETH_SetMACConfig+0x88>
 80019d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d6:	e000      	b.n	80019da <ETH_SetMACConfig+0x8a>
 80019d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7bdb      	ldrb	r3, [r3, #15]
 80019e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019f2:	4313      	orrs	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fdee 	bl	80015ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d101      	bne.n	8001a3e <ETH_SetMACConfig+0xee>
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	e000      	b.n	8001a40 <ETH_SetMACConfig+0xf0>
 8001a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d101      	bne.n	8001a56 <ETH_SetMACConfig+0x106>
 8001a52:	2208      	movs	r2, #8
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x108>
 8001a56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	d101      	bne.n	8001a68 <ETH_SetMACConfig+0x118>
 8001a64:	2204      	movs	r2, #4
 8001a66:	e000      	b.n	8001a6a <ETH_SetMACConfig+0x11a>
 8001a68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a72:	2a01      	cmp	r2, #1
 8001a74:	d101      	bne.n	8001a7a <ETH_SetMACConfig+0x12a>
 8001a76:	2202      	movs	r2, #2
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0x12c>
 8001a7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fda9 	bl	80015ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	ff20810f 	.word	0xff20810f

08001ab0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <ETH_SetDMAConfig+0x110>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <ETH_SetDMAConfig+0x2c>
 8001ad6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ada:	e000      	b.n	8001ade <ETH_SetDMAConfig+0x2e>
 8001adc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	7b5b      	ldrb	r3, [r3, #13]
 8001ae2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ae4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	7f52      	ldrb	r2, [r2, #29]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetDMAConfig+0x44>
 8001aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001af2:	e000      	b.n	8001af6 <ETH_SetDMAConfig+0x46>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b9b      	ldrb	r3, [r3, #14]
 8001afc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001afe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7f1b      	ldrb	r3, [r3, #28]
 8001b0a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	7f9b      	ldrb	r3, [r3, #30]
 8001b12:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b14:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b22:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fd50 	bl	80015ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b64:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b6a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b70:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b78:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b7a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b82:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b88:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b96:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fd21 	bl	80015ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	f8de3f23 	.word	0xf8de3f23

08001bc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0a6      	sub	sp, #152	; 0x98
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c00:	2300      	movs	r3, #0
 8001c02:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe86 	bl	8001950 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff08 	bl	8001ab0 <ETH_SetDMAConfig>
}
 8001ca0:	bf00      	nop
 8001ca2:	3798      	adds	r7, #152	; 0x98
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3305      	adds	r3, #5
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	3204      	adds	r2, #4
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <ETH_MACAddressConfig+0x68>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	061a      	lsls	r2, r3, #24
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4313      	orrs	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <ETH_MACAddressConfig+0x6c>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40028040 	.word	0x40028040
 8001d14:	40028044 	.word	0x40028044

08001d18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e03e      	b.n	8001da4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	3206      	adds	r2, #6
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d80c      	bhi.n	8001d88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e004      	b.n	8001d92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d9bd      	bls.n	8001d26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	611a      	str	r2, [r3, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e046      	b.n	8001e66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6919      	ldr	r1, [r3, #16]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001e1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	3212      	adds	r2, #18
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d80c      	bhi.n	8001e56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	e004      	b.n	8001e60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d9b5      	bls.n	8001dd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e96:	60da      	str	r2, [r3, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e175      	b.n	80021b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8164 	bne.w	80021aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x56>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80be 	beq.w	80021aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_GPIO_Init+0x324>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002046:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_GPIO_Init+0x328>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x32c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d037      	beq.n	80020e2 <HAL_GPIO_Init+0x23e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_GPIO_Init+0x330>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_GPIO_Init+0x23a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x236>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x232>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x22a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x350>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x21a>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e012      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020be:	230a      	movs	r3, #10
 80020c0:	e010      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x328>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_GPIO_Init+0x354>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae86 	bls.w	8001ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40022400 	.word	0x40022400
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800222e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002230:	b08f      	sub	sp, #60	; 0x3c
 8002232:	af0a      	add	r7, sp, #40	; 0x28
 8002234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e116      	b.n	800246e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff f880 	bl	8001360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2203      	movs	r2, #3
 8002264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fc2e 	bl	8005ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	687e      	ldr	r6, [r7, #4]
 800228c:	466d      	mov	r5, sp
 800228e:	f106 0410 	add.w	r4, r6, #16
 8002292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229e:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a2:	1d33      	adds	r3, r6, #4
 80022a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	f003 fbc2 	bl	8005a30 <USB_CoreInit>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0d7      	b.n	800246e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fc1c 	bl	8005b02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e04a      	b.n	8002366 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	333d      	adds	r3, #61	; 0x3d
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	333c      	adds	r3, #60	; 0x3c
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	b298      	uxth	r0, r3
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3344      	adds	r3, #68	; 0x44
 800230c:	4602      	mov	r2, r0
 800230e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3340      	adds	r3, #64	; 0x40
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3348      	adds	r3, #72	; 0x48
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3354      	adds	r3, #84	; 0x54
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	3301      	adds	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3af      	bcc.n	80022d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e044      	b.n	8002400 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	3301      	adds	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d3b5      	bcc.n	8002376 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	687e      	ldr	r6, [r7, #4]
 8002412:	466d      	mov	r5, sp
 8002414:	f106 0410 	add.w	r4, r6, #16
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002424:	e885 0003 	stmia.w	r5, {r0, r1}
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f003 fbb5 	bl	8005b9c <USB_DevInit>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e014      	b.n	800246e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f80b 	bl	8002478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fd73 	bl	8005f52 <USB_DevDisconnect>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_PCDEx_ActivateLPM+0x44>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	10000003 	.word	0x10000003

080024c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40007000 	.word	0x40007000

080024e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250e:	f7ff f861 	bl	80015d4 <HAL_GetTick>
 8002512:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002514:	e009      	b.n	800252a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002516:	f7ff f85d 	bl	80015d4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002524:	d901      	bls.n	800252a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e022      	b.n	8002570 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002536:	d1ee      	bne.n	8002516 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002542:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002544:	f7ff f846 	bl	80015d4 <HAL_GetTick>
 8002548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800254a:	e009      	b.n	8002560 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800254c:	f7ff f842 	bl	80015d4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255a:	d901      	bls.n	8002560 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e007      	b.n	8002570 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800256c:	d1ee      	bne.n	800254c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e29b      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b96      	ldr	r3, [pc, #600]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b0:	4b93      	ldr	r3, [pc, #588]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62>
 80025bc:	4b90      	ldr	r3, [pc, #576]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b8d      	ldr	r3, [pc, #564]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x130>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d168      	bne.n	80026b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e275      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x7a>
 80025ec:	4b84      	ldr	r3, [pc, #528]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a83      	ldr	r2, [pc, #524]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e02e      	b.n	8002658 <HAL_RCC_OscConfig+0xd8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x9c>
 8002602:	4b7f      	ldr	r3, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7e      	ldr	r2, [pc, #504]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b7c      	ldr	r3, [pc, #496]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7b      	ldr	r2, [pc, #492]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xd8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0xc0>
 8002626:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a75      	ldr	r2, [pc, #468]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a72      	ldr	r2, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xd8>
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b6c      	ldr	r3, [pc, #432]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe ffb8 	bl	80015d4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe ffb4 	bl	80015d4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e229      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xe8>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe ffa4 	bl	80015d4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe ffa0 	bl	80015d4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e215      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x110>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d069      	beq.n	8002792 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026be:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x190>
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x17a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1e9      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	493d      	ldr	r1, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e040      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b39      	ldr	r3, [pc, #228]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a38      	ldr	r2, [pc, #224]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe ff56 	bl	80015d4 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7fe ff52 	bl	80015d4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1c7      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4929      	ldr	r1, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
 800275e:	e018      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe ff32 	bl	80015d4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe ff2e 	bl	80015d4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1a3      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d038      	beq.n	8002810 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe ff0f 	bl	80015d4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe ff0b 	bl	80015d4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e180      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80027ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x23a>
 80027d8:	e01a      	b.n	8002810 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x280>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fef5 	bl	80015d4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ee:	f7fe fef1 	bl	80015d4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d903      	bls.n	8002804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e166      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
 8002800:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b92      	ldr	r3, [pc, #584]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ee      	bne.n	80027ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a4 	beq.w	8002966 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b89      	ldr	r3, [pc, #548]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a88      	ldr	r2, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b86      	ldr	r3, [pc, #536]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x4d4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002852:	4b80      	ldr	r3, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0x4d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7f      	ldr	r2, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x4d4>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe feb9 	bl	80015d4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe feb5 	bl	80015d4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	; 0x64
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e12a      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002878:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x4d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x31a>
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a6f      	ldr	r2, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	e02d      	b.n	80028f6 <HAL_RCC_OscConfig+0x376>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x33c>
 80028a2:	4b6b      	ldr	r3, [pc, #428]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	e01c      	b.n	80028f6 <HAL_RCC_OscConfig+0x376>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d10c      	bne.n	80028de <HAL_RCC_OscConfig+0x35e>
 80028c4:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	e00b      	b.n	80028f6 <HAL_RCC_OscConfig+0x376>
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d015      	beq.n	800292a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fe69 	bl	80015d4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fe65 	bl	80015d4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e0d8      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ee      	beq.n	8002906 <HAL_RCC_OscConfig+0x386>
 8002928:	e014      	b.n	8002954 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fe53 	bl	80015d4 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe fe4f 	bl	80015d4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0c2      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ee      	bne.n	8002932 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80ae 	beq.w	8002acc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d06d      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d14b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 800298a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fe20 	bl	80015d4 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fe1c 	bl	80015d4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e091      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fdee 	bl	80015d4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fdea 	bl	80015d4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e05f      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x47c>
 8002a1a:	e057      	b.n	8002acc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fdd4 	bl	80015d4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fdd0 	bl	80015d4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e045      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4b0>
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x54c>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_RCC_OscConfig+0x558>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d030      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d129      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d122      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d119      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d0      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	4965      	ldr	r1, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d040      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4936      	ldr	r1, [pc, #216]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fd00 	bl	80015d4 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fcfc 	bl	80015d4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e053      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d210      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1d0>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1d4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fc5c 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08006088 	.word	0x08006088
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	; 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc4:	f7fd fa38 	bl	8000238 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd f9de 	bl	8000238 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08006098 	.word	0x08006098

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08006098 	.word	0x08006098

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f50:	4b69      	ldr	r3, [pc, #420]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a68      	ldr	r2, [pc, #416]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f5a:	6093      	str	r3, [r2, #8]
 8002f5c:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	4964      	ldr	r1, [pc, #400]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d017      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	4959      	ldr	r1, [pc, #356]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	494a      	ldr	r1, [pc, #296]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 808b 	beq.w	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6413      	str	r3, [r2, #64]	; 0x40
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003024:	4b35      	ldr	r3, [pc, #212]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a34      	ldr	r2, [pc, #208]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe fad0 	bl	80015d4 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe facc 	bl	80015d4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e38f      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d035      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d02e      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d114      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fa94 	bl	80015d4 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe fa90 	bl	80015d4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e351      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ee      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030de:	d111      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	4901      	ldr	r1, [pc, #4]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
 80030f6:	e00b      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	0ffffcff 	.word	0x0ffffcff
 8003104:	4bac      	ldr	r3, [pc, #688]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4aab      	ldr	r2, [pc, #684]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	4ba9      	ldr	r3, [pc, #676]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	49a6      	ldr	r1, [pc, #664]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	4313      	orrs	r3, r2
 8003120:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800312e:	4ba2      	ldr	r3, [pc, #648]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003134:	4aa0      	ldr	r2, [pc, #640]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800313e:	4b9e      	ldr	r3, [pc, #632]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003140:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	499b      	ldr	r1, [pc, #620]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315c:	4b96      	ldr	r3, [pc, #600]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316a:	4993      	ldr	r1, [pc, #588]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800317e:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318c:	498a      	ldr	r1, [pc, #552]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a0:	4b85      	ldr	r3, [pc, #532]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ae:	4982      	ldr	r1, [pc, #520]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c2:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4979      	ldr	r1, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e4:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4971      	ldr	r1, [pc, #452]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003206:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f023 020c 	bic.w	r2, r3, #12
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	4968      	ldr	r1, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003228:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	4960      	ldr	r1, [pc, #384]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800324a:	4b5b      	ldr	r3, [pc, #364]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003258:	4957      	ldr	r1, [pc, #348]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	494f      	ldr	r1, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	4946      	ldr	r1, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	493e      	ldr	r1, [pc, #248]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	4935      	ldr	r1, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003302:	492d      	ldr	r1, [pc, #180]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d011      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003324:	4924      	ldr	r1, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	4914      	ldr	r1, [pc, #80]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003388:	490b      	ldr	r1, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ac:	4902      	ldr	r1, [pc, #8]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033c8:	4b8a      	ldr	r3, [pc, #552]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	4986      	ldr	r1, [pc, #536]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fc:	497d      	ldr	r1, [pc, #500]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d006      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80d6 	beq.w	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003418:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fe f8d6 	bl	80015d4 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800342c:	f7fe f8d2 	bl	80015d4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e195      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d021      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11d      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003472:	0e1b      	lsrs	r3, r3, #24
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	019a      	lsls	r2, r3, #6
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	071b      	lsls	r3, r3, #28
 8003492:	4958      	ldr	r1, [pc, #352]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02e      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c4:	d129      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034c6:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	0f1b      	lsrs	r3, r3, #28
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	019a      	lsls	r2, r3, #6
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	071b      	lsls	r3, r3, #28
 80034fa:	493e      	ldr	r1, [pc, #248]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003502:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	f023 021f 	bic.w	r2, r3, #31
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	3b01      	subs	r3, #1
 8003512:	4938      	ldr	r1, [pc, #224]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01d      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352c:	0e1b      	lsrs	r3, r3, #24
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	0f1b      	lsrs	r3, r3, #28
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	019a      	lsls	r2, r3, #6
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	061b      	lsls	r3, r3, #24
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	071b      	lsls	r3, r3, #28
 800355a:	4926      	ldr	r1, [pc, #152]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	019a      	lsls	r2, r3, #6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	491a      	ldr	r1, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003598:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800359c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359e:	f7fe f819 	bl	80015d4 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a6:	f7fe f815 	bl	80015d4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0d8      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 80ce 	bne.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fd fffc 	bl	80015d4 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035de:	e00b      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035e0:	f7fd fff8 	bl	80015d4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d904      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0bb      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003604:	d0ec      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d12a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	0f1b      	lsrs	r3, r3, #28
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	019a      	lsls	r2, r3, #6
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4944      	ldr	r1, [pc, #272]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800366a:	4b42      	ldr	r3, [pc, #264]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	493d      	ldr	r1, [pc, #244]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d022      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003698:	d11d      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4929      	ldr	r1, [pc, #164]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d028      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	0e1b      	lsrs	r3, r3, #24
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	019a      	lsls	r2, r3, #6
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	4917      	ldr	r1, [pc, #92]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4911      	ldr	r1, [pc, #68]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd ff48 	bl	80015d4 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003748:	f7fd ff44 	bl	80015d4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e007      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003766:	d1ef      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e049      	b.n	800381e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fd08 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 ff3e 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e049      	b.n	80038cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f841 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 fee7 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x24>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e03c      	b.n	8003986 <HAL_TIM_PWM_Start+0x9e>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d109      	bne.n	8003926 <HAL_TIM_PWM_Start+0x3e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e02f      	b.n	8003986 <HAL_TIM_PWM_Start+0x9e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x58>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e022      	b.n	8003986 <HAL_TIM_PWM_Start+0x9e>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d109      	bne.n	800395a <HAL_TIM_PWM_Start+0x72>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e015      	b.n	8003986 <HAL_TIM_PWM_Start+0x9e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b10      	cmp	r3, #16
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start+0x8c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start+0x9e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e092      	b.n	8003ab4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0xb6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800399c:	e023      	b.n	80039e6 <HAL_TIM_PWM_Start+0xfe>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0xc6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	e01b      	b.n	80039e6 <HAL_TIM_PWM_Start+0xfe>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0xd6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	e013      	b.n	80039e6 <HAL_TIM_PWM_Start+0xfe>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0xe6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039cc:	e00b      	b.n	80039e6 <HAL_TIM_PWM_Start+0xfe>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0xf6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039dc:	e003      	b.n	80039e6 <HAL_TIM_PWM_Start+0xfe>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fae4 	bl	8004fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	; (8003abc <HAL_TIM_PWM_Start+0x1d4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_PWM_Start+0x120>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <HAL_TIM_PWM_Start+0x1d8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x124>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_PWM_Start+0x126>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_TIM_PWM_Start+0x1d4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d01d      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_TIM_PWM_Start+0x1dc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <HAL_TIM_PWM_Start+0x1e0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_TIM_PWM_Start+0x1e4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_TIM_PWM_Start+0x1d8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_TIM_PWM_Start+0x1e8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x18a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_TIM_PWM_Start+0x1ec>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d115      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_TIM_PWM_Start+0x1f0>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d015      	beq.n	8003ab0 <HAL_TIM_PWM_Start+0x1c8>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d011      	beq.n	8003ab0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e008      	b.n	8003ab0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010400 	.word	0x40010400
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40001800 	.word	0x40001800
 8003ad8:	00010007 	.word	0x00010007

08003adc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e049      	b.n	8003b82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fb0a 	bl	800111c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f000 fd8c 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_IC_Start_IT+0x1e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e023      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x66>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d104      	bne.n	8003bba <HAL_TIM_IC_Start_IT+0x2e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e01b      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x66>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d104      	bne.n	8003bca <HAL_TIM_IC_Start_IT+0x3e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e013      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x66>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_IC_Start_IT+0x4e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	e00b      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x66>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d104      	bne.n	8003bea <HAL_TIM_IC_Start_IT+0x5e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	e003      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x66>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <HAL_TIM_IC_Start_IT+0x78>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e013      	b.n	8003c2c <HAL_TIM_IC_Start_IT+0xa0>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d104      	bne.n	8003c14 <HAL_TIM_IC_Start_IT+0x88>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e00b      	b.n	8003c2c <HAL_TIM_IC_Start_IT+0xa0>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d104      	bne.n	8003c24 <HAL_TIM_IC_Start_IT+0x98>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e003      	b.n	8003c2c <HAL_TIM_IC_Start_IT+0xa0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c2e:	7bbb      	ldrb	r3, [r7, #14]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c34:	7b7b      	ldrb	r3, [r7, #13]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0e2      	b.n	8003e04 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_IC_Start_IT+0xc2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	e023      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x10a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_IC_Start_IT+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	e01b      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x10a>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_IC_Start_IT+0xe2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6c:	e013      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x10a>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b0c      	cmp	r3, #12
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_IC_Start_IT+0xf2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c7c:	e00b      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x10a>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_IC_Start_IT+0x102>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	e003      	b.n	8003c96 <HAL_TIM_IC_Start_IT+0x10a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IC_Start_IT+0x11a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_IC_Start_IT+0x142>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start_IT+0x12a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_IC_Start_IT+0x142>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_IC_Start_IT+0x13a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_IC_Start_IT+0x142>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d841      	bhi.n	8003d58 <HAL_TIM_IC_Start_IT+0x1cc>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_TIM_IC_Start_IT+0x150>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d59 	.word	0x08003d59
 8003ce4:	08003d59 	.word	0x08003d59
 8003ce8:	08003d59 	.word	0x08003d59
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d59 	.word	0x08003d59
 8003cf4:	08003d59 	.word	0x08003d59
 8003cf8:	08003d59 	.word	0x08003d59
 8003cfc:	08003d35 	.word	0x08003d35
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003d59 	.word	0x08003d59
 8003d0c:	08003d47 	.word	0x08003d47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0202 	orr.w	r2, r2, #2
 8003d1e:	60da      	str	r2, [r3, #12]
      break;
 8003d20:	e01d      	b.n	8003d5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0204 	orr.w	r2, r2, #4
 8003d30:	60da      	str	r2, [r3, #12]
      break;
 8003d32:	e014      	b.n	8003d5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	60da      	str	r2, [r3, #12]
      break;
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0210 	orr.w	r2, r2, #16
 8003d54:	60da      	str	r2, [r3, #12]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d14e      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f925 	bl	8004fbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_TIM_IC_Start_IT+0x280>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d01d      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_TIM_IC_Start_IT+0x284>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <HAL_TIM_IC_Start_IT+0x288>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <HAL_TIM_IC_Start_IT+0x28c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_TIM_IC_Start_IT+0x290>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <HAL_TIM_IC_Start_IT+0x294>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIM_IC_Start_IT+0x236>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_TIM_IC_Start_IT+0x298>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d115      	bne.n	8003dee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <HAL_TIM_IC_Start_IT+0x29c>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d015      	beq.n	8003e00 <HAL_TIM_IC_Start_IT+0x274>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dda:	d011      	beq.n	8003e00 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e008      	b.n	8003e00 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40001800 	.word	0x40001800
 8003e28:	00010007 	.word	0x00010007

08003e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0202 	mvn.w	r2, #2
 8003e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fc fb66 	bl	8000540 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fbc0 	bl	80045fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fbc7 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0204 	mvn.w	r2, #4
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fb3c 	bl	8000540 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb96 	bl	80045fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fb9d 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0208 	mvn.w	r2, #8
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2204      	movs	r2, #4
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc fb12 	bl	8000540 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fb6c 	bl	80045fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fb73 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0210 	mvn.w	r2, #16
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fae8 	bl	8000540 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb42 	bl	80045fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fb49 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0201 	mvn.w	r2, #1
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fb1c 	bl	80045e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f001 f8ae 	bl	8005138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d10e      	bne.n	800400a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 f8a1 	bl	800514c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d10e      	bne.n	8004036 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d107      	bne.n	8004036 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 faf7 	bl	8004624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b20      	cmp	r3, #32
 8004042:	d10e      	bne.n	8004062 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d107      	bne.n	8004062 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0220 	mvn.w	r2, #32
 800405a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 f861 	bl	8005124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004084:	2302      	movs	r3, #2
 8004086:	e088      	b.n	800419a <HAL_TIM_IC_ConfigChannel+0x130>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11b      	bne.n	80040ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f000 fdc5 	bl	8004c34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 020c 	bic.w	r2, r2, #12
 80040b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
 80040cc:	e060      	b.n	8004190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11c      	bne.n	800410e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f000 fe49 	bl	8004d7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6999      	ldr	r1, [r3, #24]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
 800410c:	e040      	b.n	8004190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d11b      	bne.n	800414c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f000 fe96 	bl	8004e54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 020c 	bic.w	r2, r2, #12
 8004136:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69d9      	ldr	r1, [r3, #28]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	61da      	str	r2, [r3, #28]
 800414a:	e021      	b.n	8004190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d11c      	bne.n	800418c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f000 feb3 	bl	8004ecc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004174:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69d9      	ldr	r1, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	021a      	lsls	r2, r3, #8
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	61da      	str	r2, [r3, #28]
 800418a:	e001      	b.n	8004190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041be:	2302      	movs	r3, #2
 80041c0:	e0ff      	b.n	80043c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b14      	cmp	r3, #20
 80041ce:	f200 80f0 	bhi.w	80043b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041d2:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	080043b3 	.word	0x080043b3
 80041e0:	080043b3 	.word	0x080043b3
 80041e4:	080043b3 	.word	0x080043b3
 80041e8:	0800426d 	.word	0x0800426d
 80041ec:	080043b3 	.word	0x080043b3
 80041f0:	080043b3 	.word	0x080043b3
 80041f4:	080043b3 	.word	0x080043b3
 80041f8:	080042af 	.word	0x080042af
 80041fc:	080043b3 	.word	0x080043b3
 8004200:	080043b3 	.word	0x080043b3
 8004204:	080043b3 	.word	0x080043b3
 8004208:	080042ef 	.word	0x080042ef
 800420c:	080043b3 	.word	0x080043b3
 8004210:	080043b3 	.word	0x080043b3
 8004214:	080043b3 	.word	0x080043b3
 8004218:	08004331 	.word	0x08004331
 800421c:	080043b3 	.word	0x080043b3
 8004220:	080043b3 	.word	0x080043b3
 8004224:	080043b3 	.word	0x080043b3
 8004228:	08004371 	.word	0x08004371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 faa0 	bl	8004778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0208 	orr.w	r2, r2, #8
 8004246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6999      	ldr	r1, [r3, #24]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	619a      	str	r2, [r3, #24]
      break;
 800426a:	e0a5      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 faf2 	bl	800485c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	619a      	str	r2, [r3, #24]
      break;
 80042ac:	e084      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fb49 	bl	800494c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0208 	orr.w	r2, r2, #8
 80042c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0204 	bic.w	r2, r2, #4
 80042d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69d9      	ldr	r1, [r3, #28]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	61da      	str	r2, [r3, #28]
      break;
 80042ec:	e064      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fb9f 	bl	8004a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	021a      	lsls	r2, r3, #8
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	61da      	str	r2, [r3, #28]
      break;
 800432e:	e043      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fbd6 	bl	8004ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0208 	orr.w	r2, r2, #8
 800434a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800436e:	e023      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fc08 	bl	8004b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043b0:	e002      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
      break;
 80043b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop

080043cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_TIM_ConfigClockSource+0x1c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0b4      	b.n	8004552 <HAL_TIM_ConfigClockSource+0x186>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4b56      	ldr	r3, [pc, #344]	; (800455c <HAL_TIM_ConfigClockSource+0x190>)
 8004404:	4013      	ands	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004420:	d03e      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	f200 8087 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	f000 8086 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x172>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d87f      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b70      	cmp	r3, #112	; 0x70
 800443a:	d01a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0xa6>
 800443c:	2b70      	cmp	r3, #112	; 0x70
 800443e:	d87b      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b60      	cmp	r3, #96	; 0x60
 8004442:	d050      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004444:	2b60      	cmp	r3, #96	; 0x60
 8004446:	d877      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b50      	cmp	r3, #80	; 0x50
 800444a:	d03c      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0xfa>
 800444c:	2b50      	cmp	r3, #80	; 0x50
 800444e:	d873      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d058      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x13a>
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d86f      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d064      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x15a>
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d86b      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b20      	cmp	r3, #32
 8004462:	d060      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d867      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05c      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x15a>
 800446c:	2b10      	cmp	r3, #16
 800446e:	d05a      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x15a>
 8004470:	e062      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f000 fd7b 	bl	8004f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	609a      	str	r2, [r3, #8]
      break;
 800449e:	e04f      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f000 fd64 	bl	8004f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c2:	609a      	str	r2, [r3, #8]
      break;
 80044c4:	e03c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 fc22 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2150      	movs	r1, #80	; 0x50
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fd31 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 80044e4:	e02c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fc7e 	bl	8004df4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2160      	movs	r1, #96	; 0x60
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd21 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004504:	e01c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fc02 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2140      	movs	r1, #64	; 0x40
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fd11 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004524:	e00c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fd08 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004536:	e003      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      break;
 800453c:	e000      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800453e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	fffeff88 	.word	0xfffeff88

08004560 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d831      	bhi.n	80045d8 <HAL_TIM_ReadCapturedValue+0x78>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045bb 	.word	0x080045bb
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045d9 	.word	0x080045d9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045d9 	.word	0x080045d9
 80045ac:	080045cf 	.word	0x080045cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	60fb      	str	r3, [r7, #12]

      break;
 80045b8:	e00f      	b.n	80045da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	60fb      	str	r3, [r7, #12]

      break;
 80045c2:	e00a      	b.n	80045da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	60fb      	str	r3, [r7, #12]

      break;
 80045cc:	e005      	b.n	80045da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	60fb      	str	r3, [r7, #12]

      break;
 80045d6:	e000      	b.n	80045da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045d8:	bf00      	nop
  }

  return tmpreg;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a40      	ldr	r2, [pc, #256]	; (800474c <TIM_Base_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d00f      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <TIM_Base_SetConfig+0x118>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <TIM_Base_SetConfig+0x120>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <TIM_Base_SetConfig+0x124>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2f      	ldr	r2, [pc, #188]	; (800474c <TIM_Base_SetConfig+0x114>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d02b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d027      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <TIM_Base_SetConfig+0x118>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d023      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2b      	ldr	r2, [pc, #172]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01f      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <TIM_Base_SetConfig+0x120>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <TIM_Base_SetConfig+0x124>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d017      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_Base_SetConfig+0x128>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <TIM_Base_SetConfig+0x12c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <TIM_Base_SetConfig+0x130>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <TIM_Base_SetConfig+0x134>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a24      	ldr	r2, [pc, #144]	; (8004770 <TIM_Base_SetConfig+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <TIM_Base_SetConfig+0x13c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <TIM_Base_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0xf8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <TIM_Base_SetConfig+0x124>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40014400 	.word	0x40014400
 8004768:	40014800 	.word	0x40014800
 800476c:	40001800 	.word	0x40001800
 8004770:	40001c00 	.word	0x40001c00
 8004774:	40002000 	.word	0x40002000

08004778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <TIM_OC1_SetConfig+0xd8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_OC1_SetConfig+0xdc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC1_SetConfig+0x64>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_OC1_SetConfig+0xe0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0308 	bic.w	r3, r3, #8
 80047e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <TIM_OC1_SetConfig+0xdc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC1_SetConfig+0x8e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <TIM_OC1_SetConfig+0xe0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	fffeff8f 	.word	0xfffeff8f
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400

0800485c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <TIM_OC2_SetConfig+0xe4>)
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0320 	bic.w	r3, r3, #32
 80048a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a23      	ldr	r2, [pc, #140]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC2_SetConfig+0x68>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <TIM_OC2_SetConfig+0xec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10d      	bne.n	80048e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0x94>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <TIM_OC2_SetConfig+0xec>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	feff8fff 	.word	0xfeff8fff
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400

0800494c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <TIM_OC3_SetConfig+0xe0>)
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <TIM_OC3_SetConfig+0xe4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_OC3_SetConfig+0x66>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <TIM_OC3_SetConfig+0xe8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10d      	bne.n	80049ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <TIM_OC3_SetConfig+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC3_SetConfig+0x92>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <TIM_OC3_SetConfig+0xe8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d113      	bne.n	8004a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	621a      	str	r2, [r3, #32]
}
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	fffeff8f 	.word	0xfffeff8f
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40010400 	.word	0x40010400

08004a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <TIM_OC4_SetConfig+0xa4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <TIM_OC4_SetConfig+0xa8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC4_SetConfig+0x68>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <TIM_OC4_SetConfig+0xac>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d109      	bne.n	8004ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	feff8fff 	.word	0xfeff8fff
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <TIM_OC5_SetConfig+0x98>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a12      	ldr	r2, [pc, #72]	; (8004b84 <TIM_OC5_SetConfig+0x9c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_OC5_SetConfig+0x5e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <TIM_OC5_SetConfig+0xa0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d109      	bne.n	8004b5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	fffeff8f 	.word	0xfffeff8f
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40010400 	.word	0x40010400

08004b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <TIM_OC6_SetConfig+0x9c>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	051b      	lsls	r3, r3, #20
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <TIM_OC6_SetConfig+0xa0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC6_SetConfig+0x60>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <TIM_OC6_SetConfig+0xa4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d109      	bne.n	8004c00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	feff8fff 	.word	0xfeff8fff
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40010400 	.word	0x40010400

08004c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <TIM_TI1_SetConfig+0xcc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01b      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d017      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <TIM_TI1_SetConfig+0xd0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <TIM_TI1_SetConfig+0xd4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <TIM_TI1_SetConfig+0xd8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <TIM_TI1_SetConfig+0xdc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <TIM_TI1_SetConfig+0xe0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_TI1_SetConfig+0x66>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <TIM_TI1_SetConfig+0xe4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <TIM_TI1_SetConfig+0x6a>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <TIM_TI1_SetConfig+0x6c>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e003      	b.n	8004cbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 030a 	bic.w	r3, r3, #10
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 030a 	and.w	r3, r3, #10
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800

08004d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 030a 	bic.w	r3, r3, #10
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0210 	bic.w	r2, r3, #16
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f023 0210 	bic.w	r2, r3, #16
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	031b      	lsls	r3, r3, #12
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	031b      	lsls	r3, r3, #12
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f043 0307 	orr.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2201      	movs	r2, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1a      	ldr	r2, [r3, #32]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	401a      	ands	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e06d      	b.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a30      	ldr	r2, [pc, #192]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2f      	ldr	r2, [pc, #188]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800505a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a20      	ldr	r2, [pc, #128]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d022      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005092:	d01d      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d018      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d009      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10c      	bne.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40014000 	.word	0x40014000
 8005120:	40001800 	.word	0x40001800

08005124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e040      	b.n	80051f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc f88c 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2224      	movs	r2, #36	; 0x24
 800518c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f82c 	bl	80051fc <UART_SetConfig>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e022      	b.n	80051f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa84 	bl	80056c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb0b 	bl	8005808 <UART_CheckIdleState>
 80051f2:	4603      	mov	r3, r0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4ba6      	ldr	r3, [pc, #664]	; (80054c0 <UART_SetConfig+0x2c4>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	430b      	orrs	r3, r1
 8005232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a94      	ldr	r2, [pc, #592]	; (80054c4 <UART_SetConfig+0x2c8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0xbe>
 8005278:	4b93      	ldr	r3, [pc, #588]	; (80054c8 <UART_SetConfig+0x2cc>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d816      	bhi.n	80052b4 <UART_SetConfig+0xb8>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x90>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	0800529d 	.word	0x0800529d
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052a3 	.word	0x080052a3
 8005298:	080052af 	.word	0x080052af
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e150      	b.n	8005544 <UART_SetConfig+0x348>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e14d      	b.n	8005544 <UART_SetConfig+0x348>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e14a      	b.n	8005544 <UART_SetConfig+0x348>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e147      	b.n	8005544 <UART_SetConfig+0x348>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e144      	b.n	8005544 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a83      	ldr	r2, [pc, #524]	; (80054cc <UART_SetConfig+0x2d0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d132      	bne.n	800532a <UART_SetConfig+0x12e>
 80052c4:	4b80      	ldr	r3, [pc, #512]	; (80054c8 <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d828      	bhi.n	8005324 <UART_SetConfig+0x128>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0xdc>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	0800530d 	.word	0x0800530d
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005325 	.word	0x08005325
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005319 	.word	0x08005319
 80052ec:	08005325 	.word	0x08005325
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005313 	.word	0x08005313
 80052fc:	08005325 	.word	0x08005325
 8005300:	08005325 	.word	0x08005325
 8005304:	08005325 	.word	0x08005325
 8005308:	0800531f 	.word	0x0800531f
 800530c:	2300      	movs	r3, #0
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e118      	b.n	8005544 <UART_SetConfig+0x348>
 8005312:	2302      	movs	r3, #2
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e115      	b.n	8005544 <UART_SetConfig+0x348>
 8005318:	2304      	movs	r3, #4
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e112      	b.n	8005544 <UART_SetConfig+0x348>
 800531e:	2308      	movs	r3, #8
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e10f      	b.n	8005544 <UART_SetConfig+0x348>
 8005324:	2310      	movs	r3, #16
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e10c      	b.n	8005544 <UART_SetConfig+0x348>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <UART_SetConfig+0x2d4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d120      	bne.n	8005376 <UART_SetConfig+0x17a>
 8005334:	4b64      	ldr	r3, [pc, #400]	; (80054c8 <UART_SetConfig+0x2cc>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d013      	beq.n	800536a <UART_SetConfig+0x16e>
 8005342:	2b30      	cmp	r3, #48	; 0x30
 8005344:	d814      	bhi.n	8005370 <UART_SetConfig+0x174>
 8005346:	2b20      	cmp	r3, #32
 8005348:	d009      	beq.n	800535e <UART_SetConfig+0x162>
 800534a:	2b20      	cmp	r3, #32
 800534c:	d810      	bhi.n	8005370 <UART_SetConfig+0x174>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <UART_SetConfig+0x15c>
 8005352:	2b10      	cmp	r3, #16
 8005354:	d006      	beq.n	8005364 <UART_SetConfig+0x168>
 8005356:	e00b      	b.n	8005370 <UART_SetConfig+0x174>
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e0f2      	b.n	8005544 <UART_SetConfig+0x348>
 800535e:	2302      	movs	r3, #2
 8005360:	77fb      	strb	r3, [r7, #31]
 8005362:	e0ef      	b.n	8005544 <UART_SetConfig+0x348>
 8005364:	2304      	movs	r3, #4
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e0ec      	b.n	8005544 <UART_SetConfig+0x348>
 800536a:	2308      	movs	r3, #8
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e0e9      	b.n	8005544 <UART_SetConfig+0x348>
 8005370:	2310      	movs	r3, #16
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e0e6      	b.n	8005544 <UART_SetConfig+0x348>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a56      	ldr	r2, [pc, #344]	; (80054d4 <UART_SetConfig+0x2d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d120      	bne.n	80053c2 <UART_SetConfig+0x1c6>
 8005380:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <UART_SetConfig+0x2cc>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800538a:	2bc0      	cmp	r3, #192	; 0xc0
 800538c:	d013      	beq.n	80053b6 <UART_SetConfig+0x1ba>
 800538e:	2bc0      	cmp	r3, #192	; 0xc0
 8005390:	d814      	bhi.n	80053bc <UART_SetConfig+0x1c0>
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d009      	beq.n	80053aa <UART_SetConfig+0x1ae>
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d810      	bhi.n	80053bc <UART_SetConfig+0x1c0>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <UART_SetConfig+0x1a8>
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d006      	beq.n	80053b0 <UART_SetConfig+0x1b4>
 80053a2:	e00b      	b.n	80053bc <UART_SetConfig+0x1c0>
 80053a4:	2300      	movs	r3, #0
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e0cc      	b.n	8005544 <UART_SetConfig+0x348>
 80053aa:	2302      	movs	r3, #2
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e0c9      	b.n	8005544 <UART_SetConfig+0x348>
 80053b0:	2304      	movs	r3, #4
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e0c6      	b.n	8005544 <UART_SetConfig+0x348>
 80053b6:	2308      	movs	r3, #8
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e0c3      	b.n	8005544 <UART_SetConfig+0x348>
 80053bc:	2310      	movs	r3, #16
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e0c0      	b.n	8005544 <UART_SetConfig+0x348>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a44      	ldr	r2, [pc, #272]	; (80054d8 <UART_SetConfig+0x2dc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d125      	bne.n	8005418 <UART_SetConfig+0x21c>
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <UART_SetConfig+0x2cc>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d017      	beq.n	800540c <UART_SetConfig+0x210>
 80053dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e0:	d817      	bhi.n	8005412 <UART_SetConfig+0x216>
 80053e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e6:	d00b      	beq.n	8005400 <UART_SetConfig+0x204>
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	d811      	bhi.n	8005412 <UART_SetConfig+0x216>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <UART_SetConfig+0x1fe>
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f6:	d006      	beq.n	8005406 <UART_SetConfig+0x20a>
 80053f8:	e00b      	b.n	8005412 <UART_SetConfig+0x216>
 80053fa:	2300      	movs	r3, #0
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e0a1      	b.n	8005544 <UART_SetConfig+0x348>
 8005400:	2302      	movs	r3, #2
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e09e      	b.n	8005544 <UART_SetConfig+0x348>
 8005406:	2304      	movs	r3, #4
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e09b      	b.n	8005544 <UART_SetConfig+0x348>
 800540c:	2308      	movs	r3, #8
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e098      	b.n	8005544 <UART_SetConfig+0x348>
 8005412:	2310      	movs	r3, #16
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e095      	b.n	8005544 <UART_SetConfig+0x348>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <UART_SetConfig+0x2e0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d125      	bne.n	800546e <UART_SetConfig+0x272>
 8005422:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <UART_SetConfig+0x2cc>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800542c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005430:	d017      	beq.n	8005462 <UART_SetConfig+0x266>
 8005432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005436:	d817      	bhi.n	8005468 <UART_SetConfig+0x26c>
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d00b      	beq.n	8005456 <UART_SetConfig+0x25a>
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d811      	bhi.n	8005468 <UART_SetConfig+0x26c>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x254>
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d006      	beq.n	800545c <UART_SetConfig+0x260>
 800544e:	e00b      	b.n	8005468 <UART_SetConfig+0x26c>
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e076      	b.n	8005544 <UART_SetConfig+0x348>
 8005456:	2302      	movs	r3, #2
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e073      	b.n	8005544 <UART_SetConfig+0x348>
 800545c:	2304      	movs	r3, #4
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e070      	b.n	8005544 <UART_SetConfig+0x348>
 8005462:	2308      	movs	r3, #8
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e06d      	b.n	8005544 <UART_SetConfig+0x348>
 8005468:	2310      	movs	r3, #16
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e06a      	b.n	8005544 <UART_SetConfig+0x348>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <UART_SetConfig+0x2e4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d138      	bne.n	80054ea <UART_SetConfig+0x2ee>
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <UART_SetConfig+0x2cc>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005486:	d017      	beq.n	80054b8 <UART_SetConfig+0x2bc>
 8005488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800548c:	d82a      	bhi.n	80054e4 <UART_SetConfig+0x2e8>
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	d00b      	beq.n	80054ac <UART_SetConfig+0x2b0>
 8005494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005498:	d824      	bhi.n	80054e4 <UART_SetConfig+0x2e8>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <UART_SetConfig+0x2aa>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d006      	beq.n	80054b2 <UART_SetConfig+0x2b6>
 80054a4:	e01e      	b.n	80054e4 <UART_SetConfig+0x2e8>
 80054a6:	2300      	movs	r3, #0
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e04b      	b.n	8005544 <UART_SetConfig+0x348>
 80054ac:	2302      	movs	r3, #2
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e048      	b.n	8005544 <UART_SetConfig+0x348>
 80054b2:	2304      	movs	r3, #4
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e045      	b.n	8005544 <UART_SetConfig+0x348>
 80054b8:	2308      	movs	r3, #8
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e042      	b.n	8005544 <UART_SetConfig+0x348>
 80054be:	bf00      	nop
 80054c0:	efff69f3 	.word	0xefff69f3
 80054c4:	40011000 	.word	0x40011000
 80054c8:	40023800 	.word	0x40023800
 80054cc:	40004400 	.word	0x40004400
 80054d0:	40004800 	.word	0x40004800
 80054d4:	40004c00 	.word	0x40004c00
 80054d8:	40005000 	.word	0x40005000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	40007800 	.word	0x40007800
 80054e4:	2310      	movs	r3, #16
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e02c      	b.n	8005544 <UART_SetConfig+0x348>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a72      	ldr	r2, [pc, #456]	; (80056b8 <UART_SetConfig+0x4bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d125      	bne.n	8005540 <UART_SetConfig+0x344>
 80054f4:	4b71      	ldr	r3, [pc, #452]	; (80056bc <UART_SetConfig+0x4c0>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005502:	d017      	beq.n	8005534 <UART_SetConfig+0x338>
 8005504:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005508:	d817      	bhi.n	800553a <UART_SetConfig+0x33e>
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	d00b      	beq.n	8005528 <UART_SetConfig+0x32c>
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	d811      	bhi.n	800553a <UART_SetConfig+0x33e>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <UART_SetConfig+0x326>
 800551a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800551e:	d006      	beq.n	800552e <UART_SetConfig+0x332>
 8005520:	e00b      	b.n	800553a <UART_SetConfig+0x33e>
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	e00d      	b.n	8005544 <UART_SetConfig+0x348>
 8005528:	2302      	movs	r3, #2
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e00a      	b.n	8005544 <UART_SetConfig+0x348>
 800552e:	2304      	movs	r3, #4
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e007      	b.n	8005544 <UART_SetConfig+0x348>
 8005534:	2308      	movs	r3, #8
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e004      	b.n	8005544 <UART_SetConfig+0x348>
 800553a:	2310      	movs	r3, #16
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e001      	b.n	8005544 <UART_SetConfig+0x348>
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554c:	d15b      	bne.n	8005606 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800554e:	7ffb      	ldrb	r3, [r7, #31]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x3aa>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x360>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fd fcaa 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8005584:	61b8      	str	r0, [r7, #24]
        break;
 8005586:	e013      	b.n	80055b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fd fcba 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <UART_SetConfig+0x4c4>)
 8005592:	61bb      	str	r3, [r7, #24]
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fd fb8d 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 800559a:	61b8      	str	r0, [r7, #24]
        break;
 800559c:	e008      	b.n	80055b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	61bb      	str	r3, [r7, #24]
        break;
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	77bb      	strb	r3, [r7, #30]
        break;
 80055ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d074      	beq.n	80056a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	005a      	lsls	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d916      	bls.n	8005600 <UART_SetConfig+0x404>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d212      	bcs.n	8005600 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f023 030f 	bic.w	r3, r3, #15
 80055e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	89fa      	ldrh	r2, [r7, #14]
 80055fc:	60da      	str	r2, [r3, #12]
 80055fe:	e04f      	b.n	80056a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	77bb      	strb	r3, [r7, #30]
 8005604:	e04c      	b.n	80056a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d828      	bhi.n	800565e <UART_SetConfig+0x462>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x418>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fd fc4e 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 800563c:	61b8      	str	r0, [r7, #24]
        break;
 800563e:	e013      	b.n	8005668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fd fc5e 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <UART_SetConfig+0x4c4>)
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e00c      	b.n	8005668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fd fb31 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8005652:	61b8      	str	r0, [r7, #24]
        break;
 8005654:	e008      	b.n	8005668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e004      	b.n	8005668 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	77bb      	strb	r3, [r7, #30]
        break;
 8005666:	bf00      	nop
    }

    if (pclk != 0U)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085a      	lsrs	r2, r3, #1
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b0f      	cmp	r3, #15
 8005686:	d909      	bls.n	800569c <UART_SetConfig+0x4a0>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d205      	bcs.n	800569c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	e001      	b.n	80056a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40007c00 	.word	0x40007c00
 80056bc:	40023800 	.word	0x40023800
 80056c0:	00f42400 	.word	0x00f42400

080056c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01a      	beq.n	80057da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c2:	d10a      	bne.n	80057da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af02      	add	r7, sp, #8
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005818:	f7fb fedc 	bl	80015d4 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d10e      	bne.n	800584a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800582c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f831 	bl	80058a2 <UART_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e027      	b.n	800589a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d10e      	bne.n	8005876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f81b 	bl	80058a2 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e011      	b.n	800589a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b09c      	sub	sp, #112	; 0x70
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b2:	e0a7      	b.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	f000 80a3 	beq.w	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fb fe89 	bl	80015d4 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d13f      	bne.n	8005954 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058e8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005926:	64ba      	str	r2, [r7, #72]	; 0x48
 8005928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800592c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e068      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d050      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005970:	d148      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800597a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
 800599c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e6      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	613b      	str	r3, [r7, #16]
   return(result);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ce:	623a      	str	r2, [r7, #32]
 80059d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	69f9      	ldr	r1, [r7, #28]
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	61bb      	str	r3, [r7, #24]
   return(result);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e010      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	f43f af48 	beq.w	80058b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3770      	adds	r7, #112	; 0x70
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a30:	b084      	sub	sp, #16
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	f107 001c 	add.w	r0, r7, #28
 8005a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d120      	bne.n	8005a8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <USB_CoreInit+0xac>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa96 	bl	8005fb0 <USB_CoreReset>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e010      	b.n	8005aac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa8a 	bl	8005fb0 <USB_CoreReset>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10b      	bne.n	8005aca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f043 0206 	orr.w	r2, r3, #6
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad6:	b004      	add	sp, #16
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	ffbdffbf 	.word	0xffbdffbf

08005ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 0201 	bic.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d115      	bne.n	8005b50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fb fd5b 	bl	80015ec <HAL_Delay>
      ms++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fa29 	bl	8005f94 <USB_GetMode>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d01e      	beq.n	8005b86 <USB_SetCurrentMode+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b31      	cmp	r3, #49	; 0x31
 8005b4c:	d9f0      	bls.n	8005b30 <USB_SetCurrentMode+0x2e>
 8005b4e:	e01a      	b.n	8005b86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d115      	bne.n	8005b82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b62:	2001      	movs	r0, #1
 8005b64:	f7fb fd42 	bl	80015ec <HAL_Delay>
      ms++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa10 	bl	8005f94 <USB_GetMode>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <USB_SetCurrentMode+0x84>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b31      	cmp	r3, #49	; 0x31
 8005b7e:	d9f0      	bls.n	8005b62 <USB_SetCurrentMode+0x60>
 8005b80:	e001      	b.n	8005b86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e005      	b.n	8005b92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b32      	cmp	r3, #50	; 0x32
 8005b8a:	d101      	bne.n	8005b90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e009      	b.n	8005bd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	3340      	adds	r3, #64	; 0x40
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b0e      	cmp	r3, #14
 8005bd4:	d9f2      	bls.n	8005bbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11c      	bne.n	8005c16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e005      	b.n	8005c22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	4619      	mov	r1, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	680b      	ldr	r3, [r1, #0]
 8005c40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10c      	bne.n	8005c62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f965 	bl	8005f20 <USB_SetDevSpeed>
 8005c56:	e008      	b.n	8005c6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c58:	2101      	movs	r1, #1
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f960 	bl	8005f20 <USB_SetDevSpeed>
 8005c60:	e003      	b.n	8005c6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c62:	2103      	movs	r1, #3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f95b 	bl	8005f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f8f3 	bl	8005e58 <USB_FlushTxFifo>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f91f 	bl	8005ec0 <USB_FlushRxFifo>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	461a      	mov	r2, r3
 8005c94:	2300      	movs	r3, #0
 8005c96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	461a      	mov	r2, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e043      	b.n	8005d3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ccc:	d118      	bne.n	8005d00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	e013      	b.n	8005d12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e008      	b.n	8005d12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	461a      	mov	r2, r3
 8005d32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d3b7      	bcc.n	8005cb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	e043      	b.n	8005dd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d62:	d118      	bne.n	8005d96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e013      	b.n	8005da8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e008      	b.n	8005da8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	2300      	movs	r3, #0
 8005da6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	461a      	mov	r2, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d3b7      	bcc.n	8005d4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f043 0210 	orr.w	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <USB_DevInit+0x2b4>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f043 0208 	orr.w	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <USB_DevInit+0x2b8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e4c:	b004      	add	sp, #16
 8005e4e:	4770      	bx	lr
 8005e50:	803c3800 	.word	0x803c3800
 8005e54:	40000004 	.word	0x40000004

08005e58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <USB_FlushTxFifo+0x64>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e01b      	b.n	8005eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	daf2      	bge.n	8005e66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	019b      	lsls	r3, r3, #6
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <USB_FlushTxFifo+0x64>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e006      	b.n	8005eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d0f0      	beq.n	8005e90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	00030d40 	.word	0x00030d40

08005ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a11      	ldr	r2, [pc, #68]	; (8005f1c <USB_FlushRxFifo+0x5c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e018      	b.n	8005f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	daf2      	bge.n	8005ecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2210      	movs	r2, #16
 8005eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <USB_FlushRxFifo+0x5c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e006      	b.n	8005f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d0f0      	beq.n	8005ef0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f6c:	f023 0303 	bic.w	r3, r3, #3
 8005f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f80:	f043 0302 	orr.w	r3, r3, #2
 8005f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a13      	ldr	r2, [pc, #76]	; (8006014 <USB_CoreReset+0x64>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e01b      	b.n	8006006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	daf2      	bge.n	8005fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <USB_CoreReset+0x64>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e006      	b.n	8006006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d0f0      	beq.n	8005fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	00030d40 	.word	0x00030d40

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	; (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	; (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	; (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	; (800605c <__libc_init_array+0x44>)
 800602c:	f000 f820 	bl	8006070 <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	080060a8 	.word	0x080060a8
 8006054:	080060a8 	.word	0x080060a8
 8006058:	080060a8 	.word	0x080060a8
 800605c:	080060ac 	.word	0x080060ac

08006060 <memset>:
 8006060:	4402      	add	r2, r0
 8006062:	4603      	mov	r3, r0
 8006064:	4293      	cmp	r3, r2
 8006066:	d100      	bne.n	800606a <memset+0xa>
 8006068:	4770      	bx	lr
 800606a:	f803 1b01 	strb.w	r1, [r3], #1
 800606e:	e7f9      	b.n	8006064 <memset+0x4>

08006070 <_init>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr

0800607c <_fini>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr
